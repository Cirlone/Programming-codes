#include <iostream>

class Node {
public:
    int data;
    Node *left;
    Node *right;

    Node(int data) {
        this->data = data;
        this->left = nullptr;
        this->right = nullptr;
    }
};

class BinaryTree {
public:
    Node *root;

    BinaryTree() {
        this->root = nullptr;
    }

    void insert(int data) {
        this->root = insert(this->root, data);
    }

    Node* insert(Node *node, int data) {
        if (!node) {
            return new Node(data);
        }

        if (data < node->data) {
            node->left = insert(node->left, data);
        } else {
            node->right = insert(node->right, data);
        }

        return node;
    }

    void printInOrder() {
        printInOrder(this->root);
    }

    void printInOrder(Node *node) {
        if (!node) {
            return;
        }

        printInOrder(node->left);
        std::cout << node->data << " ";
        printInOrder(node->right);
    }
};

int main() {
    BinaryTree tree;
    tree.insert(10);
    tree.insert(5);
    tree.insert(15);
    tree.insert(3);
    tree.insert(7);
    tree.insert(12);
    tree.insert(17);

    tree.printInOrder();
    std::cout << std::endl;

    return 0;
}
