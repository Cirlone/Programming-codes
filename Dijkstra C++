#include <iostream>
#include <vector>
#include <queue>
#include <limits.h>

using namespace std;

const int N = 105;
const int INF = INT_MAX;

int n, m, s;
vector<pair<int, int>> g[N];
int d[N];
bool used[N];

void dijkstra()
{
    for (int i = 1; i <= n; i++)
        d[i] = INF;
    priority_queue<pair<int, int>> q;
    q.push({0, s});
    d[s] = 0;
    while (q.size())
    {
        int v = q.top().second;
        q.pop();
        if (used[v])
            continue;
        used[v] = true;
        for (int i = 0; i < g[v].size(); i++)
        {
            int u = g[v][i].first, w = g[v][i].second;
            if (d[u] > d[v] + w)
            {
                d[u] = d[v] + w;
                q.push({-d[u], u});
            }
        }
    }
}

int main()
{
    cin >> n >> m >> s;
    for (int i = 0; i < m; i++)
    {
        int x, y, c;
        cin >> x >> y >> c;
        g[x].push_back({y, c});
    }
    dijkstra();
    for (int i = 1; i <= n; i++)
        cout << d[i] << " ";
    cout << endl;
    return 0;
}
