#include <iostream>
#include <cstring>
#include <climits>

using namespace std;

#define MAX_NODES 100

void floydWarshall(int graph[MAX_NODES][MAX_NODES], int V)
{
    int dist[V][V];

    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            dist[i][j] = graph[i][j];
        }
    }

    for (int k = 0; k < V; k++)
    {
        for (int i = 0; i < V; i++)
        {
            for (int j = 0; j < V; j++)
            {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    cout << "The following matrix shows the shortest distances between every pair of vertices" << endl;
    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            if (dist[i][j] == INT_MAX)
                cout << "INF" << "     ";
            else
                cout << dist[i][j] << "     ";
        }
        cout << endl;
    }
}

int main()
{
    int V;
    cout << "Enter the number of vertices: ";
    cin >> V;

    int graph[MAX_NODES][MAX_NODES];
    memset(graph, 0x3f, sizeof graph);

    cout << "Enter the adjacency matrix (-1 for non-existent edges):" << endl;
    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            cin >> graph[i][j];
            if (graph[i][j] == -1)
                graph[i][j] = INT_MAX;
        }
    }

    floydWarshall(graph, V);

    return 0;
}
